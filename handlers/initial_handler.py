from aiogram import types, Router, F
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.googleapi_utils import spreadsheet_id, service
router = Router()


class MainCallback(CallbackData, prefix='main'):
    foo: str
    bar: str


class ComandsCallback(CallbackData, prefix='commands'):
    foo: str


builder = InlineKeyboardBuilder()
builder.button(
    text = "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    callback_data = MainCallback(foo="demo", bar="smth")
)

builder_commands = InlineKeyboardBuilder()
button1 = builder_commands.button(
    text = "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
    callback_data = ComandsCallback(foo="/submit")
)
button2 = builder_commands.button(
    text = "–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏",
    callback_data = ComandsCallback(foo="/status")
)
button3 = builder_commands.button(
    text = "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã",
    callback_data = ComandsCallback(foo="/contacts")
)
builder_commands.adjust(1)
@router.message(CommandStart())
async def cmd_start(msg: types.Message) -> None:
    text = "üëã –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞—è–≤–æ–∫ " \
           "–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞—é—â–∏—Ö —Ä–∞–±–æ—Ç.\n\n" \
           "–¢–µ–ø–µ—Ä—å –∫–æ–≥–¥–∞ –≤ —Ç–≤–æ–µ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ –ø–µ—Ä–µ–≥–æ—Ä–∏—Ç" \
           " –ª–∞–º–ø–æ—á–∫–∞ –∏–ª–∏ –∑–∞—Å–∫—Ä–∏–ø–∏—Ç –¥–≤–µ—Ä—å, " \
           "—Å–º–µ–ª–æ –æ–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ üöÄ.\n\n –Ø —Å–¥–µ–ª–∞—é —Ç–∞–∫, " \
           "—á—Ç–æ–±—ã —Ç–≤–æ—è –∑–∞—è–≤–∫–∞:\n" \
           "üîπ–°–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –≤ –º–æ–µ–π —Å–∏—Å—Ç–µ–º–µ\n" \
           "üîπ–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞—Å—å –∏ –Ω–∞–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n" \
           "üîπ–ò –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n" \
           "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëá"
    await msg.answer(text=text, reply_markup=builder.as_markup())


@router.callback_query(MainCallback.filter(F.foo == "demo"))
async def my_callback_foo(query: CallbackQuery, callback_data: MainCallback):
    text = "‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" \
           "–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –Ω—É–∂–Ω–∞. –ï—Å–ª–∏ —Ç—ã –ø–æ—Ç–µ—Ä—è–µ—à—å " \
           "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start"
    await query.message.answer(text=text,
                               reply_markup=builder_commands.as_markup())


@router.callback_query(ComandsCallback.filter(F.foo == "/status"))
async def callback_status(query: CallbackQuery):
    space_number, count = 0, 0

    output_submit_values = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ó–∞—è–≤–∫–∏!A:I',
        majorDimension='ROWS'
    ).execute()['values'][2:]
    arendators_values = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã!A:G',
        majorDimension='ROWS'
    ).execute()['values'][2:]

    for arendator in arendators_values:
        if int(query.from_user.id) == int(arendator[0]):
            space_number = int(arendator[-1])

    for submit in output_submit_values:
        if space_number == int(submit[1]):
            await query.message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ "
                                       f"‚Ññ{submit[0]} ‚Äì {submit[5]}")
        if space_number != int(submit[1]):
            count += 1
        if count == len(output_submit_values):
            await query.message.answer(
                f"–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")


@router.callback_query(ComandsCallback.filter(F.foo == "/submit"))
async def callback_submit(query: CallbackQuery):
    text = "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /submit"
    await query.message.answer(text=text)


@router.callback_query(ComandsCallback.filter(F.foo == "/contacts"))
async def callback_submit(query: CallbackQuery):
    contact = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ö–æ–Ω—Ç–∞–∫—Ç—ã!A2:B2',
        majorDimension='ROWS'
    ).execute()['values']
    print(contact)
    await query.message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ "
                     f"–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {contact[0][0]}")


@router.message(F.text == '/status')
async def cmd_status(msg: types.Message):
    space_number, count = 0, 0

    output_submit_values = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ó–∞—è–≤–∫–∏!A:I',
        majorDimension='ROWS'
    ).execute()['values'][2:]
    arendators_values = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã!A:G',
        majorDimension='ROWS'
    ).execute()['values'][2:]

    for arendator in arendators_values:
        if int(msg.from_user.id) == int(arendator[0]):
            space_number = int(arendator[-1])

    for submit in output_submit_values:
        if space_number == int(submit[1]):
            await msg.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ "
                                       f"‚Ññ{submit[0]} ‚Äì {submit[5]}")
        if space_number != int(submit[1]):
            count += 1
        if count == len(output_submit_values):
            await msg.answer(
                f"–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")


@router.message(F.text == '/contacts')
async def cmd_contacts(msg: types.Message):
    contact = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ö–æ–Ω—Ç–∞–∫—Ç—ã!A2:B2',
        majorDimension='ROWS'
    ).execute()['values']
    print(contact)
    await msg.answer(f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ "
                     f"–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {contact[0][0]}")
